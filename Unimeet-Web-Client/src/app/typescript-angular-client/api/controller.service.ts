/**
 * Unimeet Service
 * User Api Documentation
 *
 * OpenAPI spec version: 1.0.0
 * Contact: emreecann28@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { CommentCreateDTO } from '../model/commentCreateDTO';
import { CommentViewDTO } from '../model/commentViewDTO';
import { DepartmentViewDto } from '../model/departmentViewDto';
import { LikeCreateDTO } from '../model/likeCreateDTO';
import { LikeViewDTO } from '../model/likeViewDTO';
import { PostCreateDTO } from '../model/postCreateDTO';
import { PostViewDTO } from '../model/postViewDTO';
import { UniDeptViewDto } from '../model/uniDeptViewDto';
import { UniViewDto } from '../model/uniViewDto';
import { UserCreateDTO } from '../model/userCreateDTO';
import { UserUpdateDTO } from '../model/userUpdateDTO';
import { UserViewDTO } from '../model/userViewDTO';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable({ providedIn: 'root' })
export class ControllerService {
  protected basePath = 'http://localhost:8088';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * createComment
   *
   * @param commentCreateDTO commentCreateDTO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createCommentUsingPOST(
    commentCreateDTO: CommentCreateDTO,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public createCommentUsingPOST(
    commentCreateDTO: CommentCreateDTO,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public createCommentUsingPOST(
    commentCreateDTO: CommentCreateDTO,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public createCommentUsingPOST(
    commentCreateDTO: CommentCreateDTO,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (commentCreateDTO === null || commentCreateDTO === undefined) {
      throw new Error(
        'Required parameter commentCreateDTO was null or undefined when calling createCommentUsingPOST.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(
      `${this.basePath}/api/v1/createComment`,
      commentCreateDTO,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * createLike
   *
   * @param likeCreateDTO likeCreateDTO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createLikeUsingPOST(
    likeCreateDTO: LikeCreateDTO,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public createLikeUsingPOST(
    likeCreateDTO: LikeCreateDTO,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public createLikeUsingPOST(
    likeCreateDTO: LikeCreateDTO,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public createLikeUsingPOST(
    likeCreateDTO: LikeCreateDTO,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (likeCreateDTO === null || likeCreateDTO === undefined) {
      throw new Error(
        'Required parameter likeCreateDTO was null or undefined when calling createLikeUsingPOST.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(
      `${this.basePath}/api/v1/createLike`,
      likeCreateDTO,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * createPost
   *
   * @param postCreateDTO postCreateDTO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createPostUsingPOST(
    postCreateDTO: PostCreateDTO,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public createPostUsingPOST(
    postCreateDTO: PostCreateDTO,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public createPostUsingPOST(
    postCreateDTO: PostCreateDTO,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public createPostUsingPOST(
    postCreateDTO: PostCreateDTO,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (postCreateDTO === null || postCreateDTO === undefined) {
      throw new Error(
        'Required parameter postCreateDTO was null or undefined when calling createPostUsingPOST.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(
      `${this.basePath}/api/v1/createPost`,
      postCreateDTO,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * createUser
   *
   * @param userCreateDTO userCreateDTO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public createUserUsingPOST(
    userCreateDTO: UserCreateDTO,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public createUserUsingPOST(
    userCreateDTO: UserCreateDTO,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public createUserUsingPOST(
    userCreateDTO: UserCreateDTO,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public createUserUsingPOST(
    userCreateDTO: UserCreateDTO,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (userCreateDTO === null || userCreateDTO === undefined) {
      throw new Error(
        'Required parameter userCreateDTO was null or undefined when calling createUserUsingPOST.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<any>(
      `${this.basePath}/api/v1/createUser`,
      userCreateDTO,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * deleteUser
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public deleteUserUsingDELETE(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<any>;
  public deleteUserUsingDELETE(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<any>>;
  public deleteUserUsingDELETE(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<any>>;
  public deleteUserUsingDELETE(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling deleteUserUsingDELETE.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.delete<any>(
      `${this.basePath}/api/v1/deleteUser/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getComments
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCommentsUsingGET(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<CommentViewDTO>>;
  public getCommentsUsingGET(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<CommentViewDTO>>>;
  public getCommentsUsingGET(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<CommentViewDTO>>>;
  public getCommentsUsingGET(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<CommentViewDTO>>(
      `${this.basePath}/api/v1/comments/getAll`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getDepts
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getDeptsUsingGET(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<DepartmentViewDto>>;
  public getDeptsUsingGET(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<DepartmentViewDto>>>;
  public getDeptsUsingGET(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<DepartmentViewDto>>>;
  public getDeptsUsingGET(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<DepartmentViewDto>>(
      `${this.basePath}/api/v1/department/getAll`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getLikes
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getLikesUsingGET(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<LikeViewDTO>>;
  public getLikesUsingGET(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<LikeViewDTO>>>;
  public getLikesUsingGET(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<LikeViewDTO>>>;
  public getLikesUsingGET(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<LikeViewDTO>>(
      `${this.basePath}/api/v1/likes/getAll`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getPostById
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPostByIdUsingGET(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<PostViewDTO>;
  public getPostByIdUsingGET(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<PostViewDTO>>;
  public getPostByIdUsingGET(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<PostViewDTO>>;
  public getPostByIdUsingGET(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getPostByIdUsingGET.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<PostViewDTO>(
      `${this.basePath}/api/v1/post/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getPostById
   *
   * @param username username
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPostByIdUsingGET1(
    username: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<PostViewDTO>>;
  public getPostByIdUsingGET1(
    username: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<PostViewDTO>>>;
  public getPostByIdUsingGET1(
    username: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<PostViewDTO>>>;
  public getPostByIdUsingGET1(
    username: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (username === null || username === undefined) {
      throw new Error(
        'Required parameter username was null or undefined when calling getPostByIdUsingGET1.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<PostViewDTO>>(
      `${this.basePath}/api/v1/postByUsername/${encodeURIComponent(
        String(username)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getPosts
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getPostsUsingGET(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<PostViewDTO>>;
  public getPostsUsingGET(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<PostViewDTO>>>;
  public getPostsUsingGET(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<PostViewDTO>>>;
  public getPostsUsingGET(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<PostViewDTO>>(
      `${this.basePath}/api/v1/post/getAll`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getUniDepts
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUniDeptsUsingGET(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<UniDeptViewDto>>;
  public getUniDeptsUsingGET(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<UniDeptViewDto>>>;
  public getUniDeptsUsingGET(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<UniDeptViewDto>>>;
  public getUniDeptsUsingGET(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<UniDeptViewDto>>(
      `${this.basePath}/api/v1/unidept/getAll`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getUniversity
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUniversityUsingGET(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<UniViewDto>>;
  public getUniversityUsingGET(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<UniViewDto>>>;
  public getUniversityUsingGET(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<UniViewDto>>>;
  public getUniversityUsingGET(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<UniViewDto>>(
      `${this.basePath}/api/v1/university/getAll`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getUserById
   *
   * @param id id
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUserByIdUsingGET(
    id: number,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<UserViewDTO>;
  public getUserByIdUsingGET(
    id: number,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<UserViewDTO>>;
  public getUserByIdUsingGET(
    id: number,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<UserViewDTO>>;
  public getUserByIdUsingGET(
    id: number,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling getUserByIdUsingGET.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<UserViewDTO>(
      `${this.basePath}/api/v1/user/${encodeURIComponent(String(id))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getUserByemail
   *
   * @param email email
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUserByemailUsingGET(
    email: string,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<UserViewDTO>;
  public getUserByemailUsingGET(
    email: string,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<UserViewDTO>>;
  public getUserByemailUsingGET(
    email: string,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<UserViewDTO>>;
  public getUserByemailUsingGET(
    email: string,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (email === null || email === undefined) {
      throw new Error(
        'Required parameter email was null or undefined when calling getUserByemailUsingGET.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<UserViewDTO>(
      `${this.basePath}/api/v1/getUserByEmail/${encodeURIComponent(
        String(email)
      )}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * getUsers
   *
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getUsersUsingGET(
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Array<UserViewDTO>>;
  public getUsersUsingGET(
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Array<UserViewDTO>>>;
  public getUsersUsingGET(
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Array<UserViewDTO>>>;
  public getUsersUsingGET(
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [];

    return this.httpClient.get<Array<UserViewDTO>>(
      `${this.basePath}/api/v1/user/getAll`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * updateUser
   *
   * @param id id
   * @param userUpdateDTO userUpdateDTO
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public updateUserUsingPUT(
    id: number,
    userUpdateDTO: UserUpdateDTO,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<UserViewDTO>;
  public updateUserUsingPUT(
    id: number,
    userUpdateDTO: UserUpdateDTO,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<UserViewDTO>>;
  public updateUserUsingPUT(
    id: number,
    userUpdateDTO: UserUpdateDTO,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<UserViewDTO>>;
  public updateUserUsingPUT(
    id: number,
    userUpdateDTO: UserUpdateDTO,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (id === null || id === undefined) {
      throw new Error(
        'Required parameter id was null or undefined when calling updateUserUsingPUT.'
      );
    }

    if (userUpdateDTO === null || userUpdateDTO === undefined) {
      throw new Error(
        'Required parameter userUpdateDTO was null or undefined when calling updateUserUsingPUT.'
      );
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['*/*'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.put<UserViewDTO>(
      `${this.basePath}/api/v1/updateUser/${encodeURIComponent(String(id))}`,
      userUpdateDTO,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }
}
